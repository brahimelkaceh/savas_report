import * as React from "react";
import Backdrop from "@mui/material/Backdrop";
import Box from "@mui/material/Box";
import Modal from "@mui/material/Modal";
import Fade from "@mui/material/Fade";
import { AiOutlineSend } from "react-icons/ai";
import { useEffect } from "react";
import { useState } from "react";
import { useFormik } from "formik";
import UseFetchData from "../../../../hooks/UseFetchData";
import { useMemo } from "react";
import SuccessModal from "../../../../pages/settings/modals/SuccessModal";
let base_url = "https://farmdriver.savas.ma/api/";

const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  boxShadow: 24,
  width: 600,
};

export default function EditLot({ open, setOpen, lotId }) {
  const [lotData, setLotData] = useState([]);
  const [siteId, setSiteId] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const handleClose = () => setOpen(false);

  //? get Sites data
  const SiteApiurl = useMemo(() => `${base_url}get-pouss-sites/`, [base_url]);
  const { data: siteData, loading: siteLoading } = UseFetchData(SiteApiurl);
  //? get Guide data
  const apiGuideUrl = useMemo(
    () => `${base_url}get-active-guides/?type=1`,
    [base_url]
  );
  const { data: guideData, loading: guideLoading } = UseFetchData(apiGuideUrl);

  // ? Get Batiments data
  const apiBatsUrl = useMemo(
    () => `${base_url}get-pouss-bats/?site=${siteId}`,
    [base_url, siteId]
  );
  const { data: batsData, loading: batsLoading } = UseFetchData(apiBatsUrl);
  const formik = useFormik({
    initialValues: {
      site: "",
      guide: "",
      batiment: "",
      code: "",
      effectifDP: "",
      birthDate: "",
      transferDate: "",
      lotId: "",
    },
    // validationSchema,
    onSubmit: (values) => {
      console.log("from on submit event");
      UpdateLot(values);
    },
  });

  const UpdateLot = async (data) => {
    try {
      const accessToken = JSON.parse(localStorage.getItem("authTokens")).access;

      const response = await fetch(`${base_url}update-lot/`, {
        method: "POST",
        body: JSON.stringify(data),
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
      });
      if (response.ok) {
        setIsModalOpen(true);
        formik.handleReset();
      }
    } catch (err) {
      setError(err.message);
      // Handle the error as needed
      // You can also log the error to the console if necessary
      console.error("Error in CreateLot:", err);
    }
  };

  const getLotById = async () => {
    try {
      const accessToken = JSON.parse(localStorage.getItem("authTokens")).access;
      const response = await fetch(
        `${base_url}get-lot-prefiled/?lotId=${lotId}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      if (!response.ok) {
        // Handle non-successful responses (e.g., 404 Not Found)
        throw new Error(`Failed to fetch data for id ${lotId}`);
      }
      const data = await response.json();
      setLotData(data);
    } catch (error) {
      // Handle errors here (e.g., network error, parsing error)
      console.error(`Error fetching data for id ${lotId}:`, error.message);
      throw error; // Rethrow the error to allow the caller to handle it if needed
    }
  };
  useEffect(() => {
    formik.initialValues;
    // ! Get batiment Id
    formik.setValues({
      ...formik.values,
      site: lotData.site_id,
      batiment: lotData.batiment_id,
      guide: lotData.guide_id,
      birthDate: lotData.birthDate,
      transferDate: lotData.mep,
      effectifDP: lotData.effectifDP,
      code: lotData.code,
      modifiable: lotData.modifiable,
      lotId: lotData.lotId,
    });
    setSiteId(siteId);
  }, [lotData]);
  useEffect(() => {
    getLotById();
  }, [lotId]);
  return (
    <div>
      {isModalOpen && (
        <SuccessModal
          open={isModalOpen}
          setOpen={setIsModalOpen}
          onClose={handleClose}
          message={"Vos données ont été enregistrées avec succès."}
        />
      )}
      <Modal
        aria-labelledby="transition-modal-title"
        aria-describedby="transition-modal-description"
        open={open}
        onClose={handleClose}
        closeAfterTransition
        slots={{ backdrop: Backdrop }}
        slotProps={{
          backdrop: {
            timeout: 500,
          },
        }}
      >
        <Fade in={open}>
          <Box sx={style} className="edit-modal">
            <div className="edit-site slit-in-horizontal">
              <form
                className="lot-form settings-form-pouss"
                onSubmit={formik.handleSubmit}
              >
                <p className="title">
                  Modifier lot :{" "}
                  <span
                    style={{
                      fontSize: "18px",
                      marginLeft: "20px",
                    }}
                  >
                    {formik.values.code}
                  </span>
                </p>
                <div className="flex">
                  <label>
                    <select
                      id="guide"
                      name="guide"
                      className="input"
                      placeholder=""
                      value={formik.values.guide}
                      onChange={formik.handleChange}
                    >
                      <option value="">--</option>
                      {guideData &&
                        guideData?.map((guide) => (
                          <option
                            key={guide.id}
                            value={guide.id}
                            className="input"
                          >
                            {guide.name}
                          </option>
                        ))}
                    </select>
                    <span>
                      {guideLoading ? "loading..." : "Sélectionner guide"}
                    </span>
                  </label>
                  <label>
                    <select
                      id="batiment"
                      name="batiment"
                      className="input"
                      placeholder=""
                      value={formik.values.batiment}
                      onChange={formik.handleChange}
                    >
                      <option value={formik.values.batiment}>
                        {formik.values.batiment}
                      </option>
                      <option value="">--</option>
                      {batsData &&
                        batsData?.map(
                          (bat) =>
                            bat.isEmpty && (
                              <option
                                key={bat.id}
                                value={bat.id}
                                className="input"
                              >
                                {bat.name}
                              </option>
                            )
                        )}
                    </select>
                    <span>
                      {batsLoading ? "loading..." : "Sélectionner bâtiment"}
                    </span>
                  </label>
                  <label>
                    <select
                      id="site"
                      name="site"
                      className="input"
                      placeholder=""
                      value={formik.values.site}
                      onChange={(e) => {
                        formik.handleChange(e);
                      }}
                    >
                      <option value="">--</option>
                      {siteData &&
                        siteData?.map((site) => (
                          <option
                            key={site.id}
                            value={site.id}
                            className="input"
                          >
                            {site.name}
                          </option>
                        ))}
                    </select>
                    <span>
                      {" "}
                      {siteLoading ? "loading..." : "Sélectionner site"}
                    </span>
                  </label>
                </div>
                <label>
                  <input
                    id="code"
                    name="code"
                    type="text"
                    className="input"
                    placeholder=""
                    value={formik.values?.code}
                    onChange={formik.handleChange}
                  />
                  <span>Code lot</span>
                </label>
                <label>
                  <input
                    id="effectifDP"
                    name="effectifDP"
                    type="number"
                    className="input"
                    placeholder=""
                    value={formik.values?.effectifDP}
                    onChange={formik.handleChange}
                  />
                  <span> Effectif logée</span>
                </label>
                <label>
                  <input
                    id="birthDate"
                    name="birthDate"
                    type="date"
                    className="input"
                    placeholder=""
                    disabled={!formik.values.modifiable}
                    value={formik.values.birthDate}
                    onChange={formik.handleChange}
                  />
                  <span>
                    {!formik.values.modifiable ? "" : "Date Naissance"}{" "}
                  </span>
                </label>
                <label>
                  <input
                    id="transferDate"
                    name="transferDate"
                    type="date"
                    className="input"
                    placeholder=""
                    value={formik.values.transferDate}
                    onChange={formik.handleChange}
                  />
                  <span>Date transfert</span>
                </label>

                <div className="bnts">
                  <button type="submit" className="edit-btn">
                    <div className="svg-wrapper-1">
                      <div className="svg-wrapper">
                        <AiOutlineSend />
                      </div>
                    </div>
                    <span>Envoyer</span>
                  </button>
                </div>
              </form>
            </div>
          </Box>
        </Fade>
      </Modal>
    </div>
  );
}
